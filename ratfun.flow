import simplifier;
import ds/tree;

export {
    PolyMult(mult : Tree<string, int>);

    PolySum(sum : Tree<PolyMult, int>);

    RatFunc(nominator : PolySum, denominator : PolySum);

    ar2rf(expr : ArExpr) -> RatFunc;

    rf2s(rf : RatFunc) -> string;
}

ar2rf(e : ArExpr) -> RatFunc {
    switch(e){
        ArDer(e1, v) : ar2rf(simplifyArExpr(differentiateExpr(e1, v)))
        
        ArSum(l, r) : sumRatFunc(ar2rf(l), ar2rf(r))

        ArDiff(l, r) : sumRatFunc(ar2rf(l), negRatFunc(ar2rf(r)))

        ArMult(l, r) : multRatFunc(ar2rf(l), ar2rf(r))

        ArDiv(l, r) : {
            r1 = ar2rf(r);
            multRatFunc(ar2rf(l), RatFunc(r1.denominator, r1.nominator))
        }

        ArNeg(v) : negRatFunc(ar2rf(v))

        ArVar(v) : RatFunc(PolySum(makeTree1(PolyMult(makeTree1(v, 1)), 1)), PolySum(makeTree1(PolyMult(TreeEmpty()), 1)))

        ArInt(v) : RatFunc(PolySum(makeTree1(PolyMult(TreeEmpty()), v)), PolySum(makeTree1(PolyMult(TreeEmpty()), 1)))

        ArDeg(v, d) : ar2rf(deg2mult(v, d))
    }
}

negRatFunc(a : RatFunc) -> RatFunc {
    RatFunc(negPolySum(a.nominator), a.denominator);
}

sumRatFunc(a : RatFunc, b : RatFunc) -> RatFunc {
    RatFunc(sumPolySum(multPolySum(a.nominator, b.denominator), multPolySum(b.nominator, a.denominator)), multPolySum(a.denominator, b.denominator));
}

multRatFunc(a : RatFunc, b : RatFunc) -> RatFunc {
    RatFunc(multPolySum(a.nominator, b.nominator), multPolySum(a.denominator, b.denominator));
}

deg2mult(v : ArExpr, d : ArInt) {
    if (d.val < 0) deg2mult(ArDiv(ArInt(1), v), ArInt(-d.val))
    else if (d.val == 0) ArInt(1)
    else if (d.val == 1) v
    else deg2mult(ArMult(v, v), ArInt(d.val - 1))
}

negPolySum(p : PolySum) -> PolySum {
    PolySum(foldTree(p.sum, TreeEmpty(), \k, v, acc -> mergeTree(acc, makeTree1(k, -v))))
}

multPolySum(p1 : PolySum, p2 : PolySum) -> PolySum {
    PolySum(
        filterTree(
            foldTree(p1.sum, TreeEmpty(), \k1, v1, acc1 -> {
                mergeTreeCustom(acc1,
                    foldTree(p2.sum, TreeEmpty(), \k2, v2, acc2 -> {
                        multi = PolyMult(mergeTreeCustom(k1.mult, k2.mult, \kk, vv1, vv2 -> vv1 + vv2));
                        mergeTreeCustom(acc2, makeTree1(multi, v1 * v2), \kk, vv1, vv2 -> vv1 + vv2);
                    }), \kk, vv1, vv2 -> vv1 + vv2
                )
            }), \k,v -> v != 0
        )
    )
}

sumPolySum(p1 : PolySum, p2 : PolySum) -> PolySum {
    PolySum(filterTree(mergeTreeCustom(p1.sum, p2.sum, \k, v1, v2 -> v1 + v2), \k, v -> v != 0))
}



rf2s(rf : RatFunc) -> string {
    rf1 = reduceRatFunc(rf);
    if (PolySum2s(rf1.denominator) == "0") "Division by zero"
    else if (PolySum2s(rf1.denominator) == "1") PolySum2s(rf1.nominator)
    else "(" + PolySum2s(rf1.nominator) + " / " + PolySum2s(rf1.denominator) + ")"
}

PolySum2s(rfpod: PolySum) -> string {
    pairs = tree2pairs(sumOfLikeTerms(rfpod).mult);
    if (length(pairs) == 0) "0"
    else {
        foldi(pairs, "", \i, acc, v -> {
            if (i == 0) acc + nodePolyMult2s(v.first, v.second)
            else if (v.second < 1) "(" + acc + " - " + nodePolyMult2s(v.first, -v.second) + ")"
            else "(" + acc + " + " + nodePolyMult2s(v.first, v.second) + ")"
        });
    }
}

PolyMult2s(pm : PolyMult) -> string {
    pairsPolyMult = tree2pairs(pm.mult);
    if (length(pairsPolyMult) == 0) "1"
    else {
        str = foldi(pairsPolyMult, "", \i, acc, v -> {
            deg = degFunc2s(v.first, v.second);
            polyMultStr = acc + deg;
            if (deg == "1") acc
            else if (i == length(pairsPolyMult) - 1) brackets(acc, polyMultStr)
            else brackets(acc, polyMultStr) + "*"
            }
        );
        if (endsWith(str, "*")) substring(str, 0, strlen(str) - 1)
        else str
    }
}

brackets(str1 : string, str2 : string) -> string {
    if (endsWith(str1, "*")) "(" + str2 + ")"
    else str2
}

degFunc2s(var : string, degree : int) -> string {
    if (degree == 0) "1"
    else if (degree != 1) "(" + var + "^" + i2s(degree) + ")"
    else var
}

nodePolyMult2s(value: string, coeff: int) -> string {
    if ((coeff != 1) && (coeff != -1) && (value != "1") && (value != "")) "(" + i2s(coeff) + "*" + value + ")"
    else if ((coeff == 1) && (value != "1")) value
    else if ((coeff == -1) && (value != "1")) "-" + value
    else i2s(coeff)
}

sumOfLikeTerms(p : PolySum) -> PolyMult {
    plusValues = filterTree(p.sum, \k, v -> v > 0);
    textTreePlus = foldTree(plusValues, TreeEmpty(), \k, v, acc -> {mergeTree(acc, makeTree1(PolyMult2s(k), v))});

    minusValues = filterTree(p.sum, \k, v -> v < 0);
    textTreeMinus = foldTree(minusValues, TreeEmpty(), \k, v, acc -> {mergeTree(acc, makeTree1(PolyMult2s(k), v))});

    PolyMult(filterTree(mergeTreeCustom(textTreePlus, textTreeMinus, \k, v1, v2 -> v1 + v2), \k, v -> v != 0))
}


reduceRatFunc(rf  : RatFunc) -> RatFunc {
    if (PolySum2s(rf.denominator) == "0") rf
    else {
        nomCom = PolySum(makeTree1(commonFactPolyMultForSum(rf.nominator), commonFactNumForSum(rf.nominator)));
	    denCom = PolySum(makeTree1(commonFactPolyMultForSum(rf.denominator), commonFactNumForSum(rf.denominator)));
	    nomRest = dividePolySum(rf.nominator, nomCom);
	    denRest = dividePolySum(rf.denominator, denCom);

	    comsCom = commonFactForFacts(nomCom, denCom);
	    nomComRest = dividePolySum(nomCom, comsCom);
	    denComRest = dividePolySum(denCom, comsCom);

	    if (nomRest == denRest) RatFunc(nomComRest, denComRest)
	    else if (nomRest == negPolySum(denRest)) negRatFunc(RatFunc(nomComRest, denComRest))
	    else multRatFunc(RatFunc(nomRest, denRest), RatFunc(nomComRest,denComRest))
    }
}

commonFactPolyMultForSum(p : PolySum) -> PolyMult {
	if (p.sum == TreeEmpty()) PolyMult(TreeEmpty())
	else {
		firstPoly = (tree2pairs(p.sum))[0];
		polyMultTree = foldTree(firstPoly.first.mult, firstPoly.first.mult, \k, v, acc -> {
			foldTree(p.sum, acc, \k1, v1, acc1 -> {
				v2 = lookupTreeDef(k1.mult, k, 0);
				mergeTreeCustom(acc1, makeTree1(k, if (v2 > v) v else v2), \k2, vv1, vv2 -> {
					if (vv1 > vv2) vv2 else vv1
				})
			})
		})
		PolyMult(filterTree(polyMultTree, \k, v -> v != 0));
	}
}

commonFactNumForSum(p : PolySum) -> int {
	if (p.sum == TreeEmpty()) 1
	else foldTree(p.sum, 0, \k, v, acc -> {if (acc == 0) iabs(v) else gcd(acc, iabs(v))})
}

commonFactForFacts(p1 : PolySum, p2 : PolySum) -> PolySum {
	if (p1.sum == TreeEmpty() || p2.sum == TreeEmpty()) PolySum(makeTree1(PolyMult(TreeEmpty()), 1))
	else {
		psp1 = (tree2pairs(p1.sum))[0];
		psp2 = (tree2pairs(p2.sum))[0];
		resultNum = gcd(psp1.second, psp2.second);
		resultMult = foldTree(psp1.first.mult, psp1.first.mult, \k, v, acc -> {
			v2 = lookupTreeDef(psp2.first.mult, k, 0);
			mergeTreeCustom(acc, makeTree1(k, if(v2 > v) v else v2), \kk, vv1, vv2 -> {
				if(vv1 > vv2) vv2 else vv1
			})
		})
		PolySum(makeTree1(PolyMult(filterTree(resultMult, \k, v -> v != 0)), resultNum));
	}
}

dividePolySum(pnum : PolySum, pden : PolySum) -> PolySum {
    if (PolySum2s(pden) == "1") pnum
    else {
        psp = (tree2pairs(pden.sum))[0];
	    denNum = psp.second;
	    denMult = psp.first.mult;
	    PolySum(foldTree(pnum.sum, TreeEmpty(), \k, v, acc -> {
            mergeTree(acc, makeTree1(PolyMult(filterTree(mergeTreeCustom(k.mult, denMult, \kk, vv1, vv2 -> vv2 - vv1), \k1, v1 -> v != 0)), v/denNum))
        }))
    }
}